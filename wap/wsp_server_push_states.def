/* ==================================================================== 
 * The Kannel Software License, Version 1.0 
 * 
 * Copyright (c) 2001-2012 Kannel Group  
 * Copyright (c) 1998-2001 WapIT Ltd.   
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the 
 *    distribution. 
 * 
 * 3. The end-user documentation included with the redistribution, 
 *    if any, must include the following acknowledgment: 
 *       "This product includes software developed by the 
 *        Kannel Group (http://www.kannel.org/)." 
 *    Alternately, this acknowledgment may appear in the software itself, 
 *    if and wherever such third-party acknowledgments normally appear. 
 * 
 * 4. The names "Kannel" and "Kannel Group" must not be used to 
 *    endorse or promote products derived from this software without 
 *    prior written permission. For written permission, please  
 *    contact org@kannel.org. 
 * 
 * 5. Products derived from this software may not be called "Kannel", 
 *    nor may "Kannel" appear in their name, without prior written 
 *    permission of the Kannel Group. 
 * 
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED.  IN NO EVENT SHALL THE KANNEL GROUP OR ITS CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,  
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * ==================================================================== 
 * 
 * This software consists of voluntary contributions made by many 
 * individuals on behalf of the Kannel Group.  For more information on  
 * the Kannel Group, please see <http://www.kannel.org/>. 
 * 
 * Portions of this software are based upon software originally written at  
 * WapIT Ltd., Helsinki, Finland for the Kannel project.  
 */ 

/*
 * wsp_push_server_states.def - macro calls to generate rows of the state 
 * table. See the documentation for guidance how to use and update these.
 *
 * Note that NULL state is called here SERVER_PUSH_NULL_STATE. Condition 1
 * means that an action is unconditional.
 *
 * By Aarno Syvänen for Wapit Ltd
 */

STATE_NAME(SERVER_PUSH_NULL_STATE)
STATE_NAME(SERVER_PUSH_PUSHING)

ROW(SERVER_PUSH_NULL_STATE,
    S_ConfirmedPush_Req,
    1,
    {
     WSP_PDU *pdu;

     pdu = make_confirmedpush_pdu(current_event);
     send_invoke(sm, pdu, current_event, TRANSACTION_CLASS_1);
    },
    SERVER_PUSH_PUSHING)

ROW(SERVER_PUSH_PUSHING,
    Push_Abort,
    1,
    {
     send_abort_to_initiator(current_event->u.Push_Abort.reason, 
         pm->transaction_id);
     indicate_pushabort(pm, current_event->u.Push_Abort.reason);
    },
    SERVER_PUSH_NULL_STATE)

ROW(SERVER_PUSH_PUSHING,
    TR_Invoke_Cnf,
    1,
    {
     confirm_push(pm);
    },
    SERVER_PUSH_NULL_STATE)

ROW(SERVER_PUSH_PUSHING,
    TR_Abort_Ind,
    current_event->u.TR_Abort_Ind.abort_code == WSP_ABORT_DISCONNECT,
    {
     WAPEvent *wsp_event;
     
     wsp_event = wap_event_create(Disconnect_Event);
     wsp_event->u.Disconnect_Event.session_handle = pm->server_push_id;
     gwlist_append(queue, wsp_event);
    },
    SERVER_PUSH_NULL_STATE)

ROW(SERVER_PUSH_PUSHING,
    TR_Abort_Ind,
    current_event->u.TR_Abort_Ind.abort_code == WSP_ABORT_SUSPEND,
    {
     WAPEvent *wsp_event;

     wsp_event = wap_event_create(Suspend_Event);
     wsp_event->u.Suspend_Event.session_handle = pm->server_push_id;
     gwlist_append(queue, wsp_event);
    },
    SERVER_PUSH_NULL_STATE)

ROW(SERVER_PUSH_PUSHING,
    TR_Abort_Ind,
    current_event->u.TR_Abort_Ind.abort_code != WSP_ABORT_DISCONNECT  &&
    current_event->u.TR_Abort_Ind.abort_code != WSP_ABORT_SUSPEND,
    {
     indicate_pushabort(pm, current_event->u.Push_Abort.reason);
    },
    SERVER_PUSH_NULL_STATE)

#undef STATE_NAME
#undef ROW



