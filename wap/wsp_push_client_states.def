/* ==================================================================== 
 * The Kannel Software License, Version 1.0 
 * 
 * Copyright (c) 2001-2014 Kannel Group  
 * Copyright (c) 1998-2001 WapIT Ltd.   
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the 
 *    distribution. 
 * 
 * 3. The end-user documentation included with the redistribution, 
 *    if any, must include the following acknowledgment: 
 *       "This product includes software developed by the 
 *        Kannel Group (http://www.kannel.org/)." 
 *    Alternately, this acknowledgment may appear in the software itself, 
 *    if and wherever such third-party acknowledgments normally appear. 
 * 
 * 4. The names "Kannel" and "Kannel Group" must not be used to 
 *    endorse or promote products derived from this software without 
 *    prior written permission. For written permission, please  
 *    contact org@kannel.org. 
 * 
 * 5. Products derived from this software may not be called "Kannel", 
 *    nor may "Kannel" appear in their name, without prior written 
 *    permission of the Kannel Group. 
 * 
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED.  IN NO EVENT SHALL THE KANNEL GROUP OR ITS CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,  
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * ==================================================================== 
 * 
 * This software consists of voluntary contributions made by many 
 * individuals on behalf of the Kannel Group.  For more information on  
 * the Kannel Group, please see <http://www.kannel.org/>. 
 * 
 * Portions of this software are based upon software originally written at  
 * WapIT Ltd., Helsinki, Finland for the Kannel project.  
 */ 

/*
 * wsp_push_client_states.def: Macros defining wsp push client state table 
 * rows.
 * See documentation for guidance how to use and update these.
 * 1 means an unconditional action, {} an ignored event.
 *
 * By Aarno Syvänen for Wapit Ltd.
 */

PUSH_CLIENT_STATE_NAME(PUSH_CLIENT_NULL_STATE)
PUSH_CLIENT_STATE_NAME(PUSH_CLIENT_RECEIVING)

ROW(PUSH_CLIENT_NULL_STATE,
    TR_Invoke_Ind,
    e->u.TR_Invoke_Ind.tcl == 1 && pdu->type == ConfirmedPush,
    {
     Octstr *push_body;
     List *push_headers;

     if (pdu->u.ConfirmedPush.headers_len > 0) 
	 push_headers = wsp_headers_unpack(pdu->u.ConfirmedPush.headers, 0);
     else  
	 push_headers = NULL;    

     http_remove_hop_headers(push_headers);
     http_header_pack(push_headers);
     gw_assert(push_headers);
     cpm->push_headers = http_header_duplicate(push_headers);
     push_body = octstr_duplicate(pdu->u.ConfirmedPush.data);

     http_destroy_headers(push_headers);
/*
 * For debugging: just tell about the push OTA event, and destroy it here - 
 * handle_event does not do it.
 */
     indicate_confirmedpush(cpm, push_body);
     octstr_destroy(push_body);
/*
 * For debugging: create S_ConfirmedPush_Res by ourselves and send it to 
 * ourselves.
 */
    response_confirmedpush(cpm);
    },
    PUSH_CLIENT_RECEIVING)


ROW(PUSH_CLIENT_RECEIVING,
    S_ConfirmedPush_Res,
    1,
    {
     response_responder_invoke(cpm);
    },
    PUSH_CLIENT_NULL_STATE)


ROW(PUSH_CLIENT_RECEIVING,
    S_PushAbort_Req,
    1,
    {
     send_abort_to_responder(cpm, e->u.S_PushAbort_Req.reason);
     indicate_pushabort(cpm, e->u.S_PushAbort_Req.reason);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    Abort_Event,
    1,
    {
     send_abort_to_responder(cpm, e->u.S_PushAbort_Req.reason);
     indicate_pushabort(cpm, WSP_ABORT_USERREQ);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    TR_Abort_Ind,
    e->u.TR_Abort_Ind.abort_code == WSP_ABORT_DISCONNECT,
    {
     WAPEvent *wsp_event;

     wsp_event = wap_event_create(Disconnect_Event);
     wsp_event->u.Disconnect_Event.session_handle = cpm->client_push_id;
     gwlist_append(push_client_queue, wsp_event);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    TR_Abort_Ind,
    e->u.TR_Abort_Ind.abort_code == WSP_ABORT_SUSPEND,
    {
     WAPEvent *wsp_event;

     wsp_event = wap_event_create(Suspend_Event);
     wsp_event->u.Suspend_Event.session_handle = cpm->client_push_id;
     gwlist_append(push_client_queue, wsp_event);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    TR_Abort_Ind,
    e->u.TR_Abort_Ind.abort_code != WSP_ABORT_DISCONNECT &&
    e->u.TR_Abort_Ind.abort_code != WSP_ABORT_SUSPEND,
    {
     indicate_pushabort(cpm, e->u.S_PushAbort_Req.reason);
    },
    PUSH_CLIENT_NULL_STATE)

#undef PUSH_CLIENT_STATE_NAME
#undef ROW




